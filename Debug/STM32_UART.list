
STM32_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000288  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000450  08000450  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000450  08000450  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08000450  08000450  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000450  08000450  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000450  08000450  00010450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000454  08000454  00010454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08000458  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000008  08000460  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000460  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000469  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000159  00000000  00000000  000204e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000068  00000000  00000000  00020640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000045  00000000  00000000  000206a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b738  00000000  00000000  000206ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000653  00000000  00000000  0003be25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009aa68  00000000  00000000  0003c478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000000e8  00000000  00000000  000d6ee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000d6fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000008 	.word	0x20000008
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08000438 	.word	0x08000438

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000000c 	.word	0x2000000c
 8000204:	08000438 	.word	0x08000438

08000208 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0

	BUTTON_CONF();
 800020c:	f000 f810 	bl	8000230 <BUTTON_CONF>
	UART3_CONF();
 8000210:	f000 f844 	bl	800029c <UART3_CONF>

	while(1){
		Delay();
 8000214:	f000 f82c 	bl	8000270 <Delay>
		Delay();
 8000218:	f000 f82a 	bl	8000270 <Delay>
		Delay();
 800021c:	f000 f828 	bl	8000270 <Delay>
		Delay();
 8000220:	f000 f826 	bl	8000270 <Delay>
		PRINT_TAB(Tab);
 8000224:	4801      	ldr	r0, [pc, #4]	; (800022c <main+0x24>)
 8000226:	f000 f885 	bl	8000334 <PRINT_TAB>
		Delay();
 800022a:	e7f3      	b.n	8000214 <main+0xc>
 800022c:	20000000 	.word	0x20000000

08000230 <BUTTON_CONF>:
	}
}

void BUTTON_CONF(void){
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0
	//GPIO PORT C CLOCK ENABLE
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000234:	4b0b      	ldr	r3, [pc, #44]	; (8000264 <BUTTON_CONF+0x34>)
 8000236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000238:	4a0a      	ldr	r2, [pc, #40]	; (8000264 <BUTTON_CONF+0x34>)
 800023a:	f043 0304 	orr.w	r3, r3, #4
 800023e:	6313      	str	r3, [r2, #48]	; 0x30
	//INPUT
	GPIOC->MODER &= ~(GPIO_MODER_MODER13);
 8000240:	4b09      	ldr	r3, [pc, #36]	; (8000268 <BUTTON_CONF+0x38>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a08      	ldr	r2, [pc, #32]	; (8000268 <BUTTON_CONF+0x38>)
 8000246:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800024a:	6013      	str	r3, [r2, #0]
	//NO PULL UP, NO PULL DOWN
	GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPDR13);
 800024c:	4b07      	ldr	r3, [pc, #28]	; (800026c <BUTTON_CONF+0x3c>)
 800024e:	68db      	ldr	r3, [r3, #12]
 8000250:	4a06      	ldr	r2, [pc, #24]	; (800026c <BUTTON_CONF+0x3c>)
 8000252:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8000256:	60d3      	str	r3, [r2, #12]
}
 8000258:	bf00      	nop
 800025a:	46bd      	mov	sp, r7
 800025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	40023800 	.word	0x40023800
 8000268:	40020800 	.word	0x40020800
 800026c:	40020400 	.word	0x40020400

08000270 <Delay>:

void Delay(void){
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
	uint32_t time;
	for(time = 0; time < 99999; time++){}
 8000276:	2300      	movs	r3, #0
 8000278:	607b      	str	r3, [r7, #4]
 800027a:	e002      	b.n	8000282 <Delay+0x12>
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	3301      	adds	r3, #1
 8000280:	607b      	str	r3, [r7, #4]
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	4a04      	ldr	r2, [pc, #16]	; (8000298 <Delay+0x28>)
 8000286:	4293      	cmp	r3, r2
 8000288:	d9f8      	bls.n	800027c <Delay+0xc>
}
 800028a:	bf00      	nop
 800028c:	bf00      	nop
 800028e:	370c      	adds	r7, #12
 8000290:	46bd      	mov	sp, r7
 8000292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000296:	4770      	bx	lr
 8000298:	0001869e 	.word	0x0001869e

0800029c <UART3_CONF>:

void UART3_CONF(void){
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
	//GPIO PORT C CLOCK ENABLE
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 80002a0:	4b21      	ldr	r3, [pc, #132]	; (8000328 <UART3_CONF+0x8c>)
 80002a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a4:	4a20      	ldr	r2, [pc, #128]	; (8000328 <UART3_CONF+0x8c>)
 80002a6:	f043 0308 	orr.w	r3, r3, #8
 80002aa:	6313      	str	r3, [r2, #48]	; 0x30
	//PD8 - USART3_TX (ALTERNATE FUNCTION)
	GPIOD -> MODER |= GPIO_MODER_MODER8_1;
 80002ac:	4b1f      	ldr	r3, [pc, #124]	; (800032c <UART3_CONF+0x90>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a1e      	ldr	r2, [pc, #120]	; (800032c <UART3_CONF+0x90>)
 80002b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002b6:	6013      	str	r3, [r2, #0]
	GPIOD -> AFR[1] |= 0x7;
 80002b8:	4b1c      	ldr	r3, [pc, #112]	; (800032c <UART3_CONF+0x90>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002bc:	4a1b      	ldr	r2, [pc, #108]	; (800032c <UART3_CONF+0x90>)
 80002be:	f043 0307 	orr.w	r3, r3, #7
 80002c2:	6253      	str	r3, [r2, #36]	; 0x24
	//PD9 - USART3_RX (ALTERNATE FUNCTION)
	GPIOD -> MODER |= GPIO_MODER_MODER9_1;
 80002c4:	4b19      	ldr	r3, [pc, #100]	; (800032c <UART3_CONF+0x90>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a18      	ldr	r2, [pc, #96]	; (800032c <UART3_CONF+0x90>)
 80002ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002ce:	6013      	str	r3, [r2, #0]
	GPIOD -> AFR[1] |= (0x7 << 4);
 80002d0:	4b16      	ldr	r3, [pc, #88]	; (800032c <UART3_CONF+0x90>)
 80002d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002d4:	4a15      	ldr	r2, [pc, #84]	; (800032c <UART3_CONF+0x90>)
 80002d6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80002da:	6253      	str	r3, [r2, #36]	; 0x24
	//OPEN - DRAIN
	GPIOD -> OTYPER |= GPIO_OTYPER_OT9;
 80002dc:	4b13      	ldr	r3, [pc, #76]	; (800032c <UART3_CONF+0x90>)
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	4a12      	ldr	r2, [pc, #72]	; (800032c <UART3_CONF+0x90>)
 80002e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002e6:	6053      	str	r3, [r2, #4]

	//USART3 CLOCK ENABLE
	RCC -> APB1ENR |= RCC_APB1ENR_USART3EN;
 80002e8:	4b0f      	ldr	r3, [pc, #60]	; (8000328 <UART3_CONF+0x8c>)
 80002ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002ec:	4a0e      	ldr	r2, [pc, #56]	; (8000328 <UART3_CONF+0x8c>)
 80002ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80002f2:	6413      	str	r3, [r2, #64]	; 0x40
	//BAUD RATE - 115200
	USART3 -> BRR = 16000000 / 115200;
 80002f4:	4b0e      	ldr	r3, [pc, #56]	; (8000330 <UART3_CONF+0x94>)
 80002f6:	228a      	movs	r2, #138	; 0x8a
 80002f8:	60da      	str	r2, [r3, #12]
	//FRAME 8N1
	//USART ENABLE
	USART3 -> CR1 |= USART_CR1_UE;
 80002fa:	4b0d      	ldr	r3, [pc, #52]	; (8000330 <UART3_CONF+0x94>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	4a0c      	ldr	r2, [pc, #48]	; (8000330 <UART3_CONF+0x94>)
 8000300:	f043 0301 	orr.w	r3, r3, #1
 8000304:	6013      	str	r3, [r2, #0]
	//TRANSMITTER ENABLE
	USART3 -> CR1 |= USART_CR1_TE;
 8000306:	4b0a      	ldr	r3, [pc, #40]	; (8000330 <UART3_CONF+0x94>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	4a09      	ldr	r2, [pc, #36]	; (8000330 <UART3_CONF+0x94>)
 800030c:	f043 0308 	orr.w	r3, r3, #8
 8000310:	6013      	str	r3, [r2, #0]
	//RECEIVER ENABLE
	USART3 -> CR1 |= USART_CR1_RE;
 8000312:	4b07      	ldr	r3, [pc, #28]	; (8000330 <UART3_CONF+0x94>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	4a06      	ldr	r2, [pc, #24]	; (8000330 <UART3_CONF+0x94>)
 8000318:	f043 0304 	orr.w	r3, r3, #4
 800031c:	6013      	str	r3, [r2, #0]
}
 800031e:	bf00      	nop
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr
 8000328:	40023800 	.word	0x40023800
 800032c:	40020c00 	.word	0x40020c00
 8000330:	40004800 	.word	0x40004800

08000334 <PRINT_TAB>:

void PRINT_TAB(char Tab[]){
 8000334:	b480      	push	{r7}
 8000336:	b085      	sub	sp, #20
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
	while(!(USART3 -> ISR & USART_ISR_TXE)){  }
 800033c:	bf00      	nop
 800033e:	4b16      	ldr	r3, [pc, #88]	; (8000398 <PRINT_TAB+0x64>)
 8000340:	69db      	ldr	r3, [r3, #28]
 8000342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000346:	2b00      	cmp	r3, #0
 8000348:	d0f9      	beq.n	800033e <PRINT_TAB+0xa>
	for(uint8_t i = 0; i < 5; i++){
 800034a:	2300      	movs	r3, #0
 800034c:	73fb      	strb	r3, [r7, #15]
 800034e:	e00f      	b.n	8000370 <PRINT_TAB+0x3c>
		//Tab[i] TO BUFFER
		USART3 -> TDR = Tab[i];
 8000350:	7bfb      	ldrb	r3, [r7, #15]
 8000352:	687a      	ldr	r2, [r7, #4]
 8000354:	4413      	add	r3, r2
 8000356:	781a      	ldrb	r2, [r3, #0]
 8000358:	4b0f      	ldr	r3, [pc, #60]	; (8000398 <PRINT_TAB+0x64>)
 800035a:	629a      	str	r2, [r3, #40]	; 0x28
		while(!(USART3 -> ISR & USART_ISR_TXE)){  }
 800035c:	bf00      	nop
 800035e:	4b0e      	ldr	r3, [pc, #56]	; (8000398 <PRINT_TAB+0x64>)
 8000360:	69db      	ldr	r3, [r3, #28]
 8000362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000366:	2b00      	cmp	r3, #0
 8000368:	d0f9      	beq.n	800035e <PRINT_TAB+0x2a>
	for(uint8_t i = 0; i < 5; i++){
 800036a:	7bfb      	ldrb	r3, [r7, #15]
 800036c:	3301      	adds	r3, #1
 800036e:	73fb      	strb	r3, [r7, #15]
 8000370:	7bfb      	ldrb	r3, [r7, #15]
 8000372:	2b04      	cmp	r3, #4
 8000374:	d9ec      	bls.n	8000350 <PRINT_TAB+0x1c>
	}
	//ENTER -> NEW LINE
	USART3 -> TDR = 0x0D;
 8000376:	4b08      	ldr	r3, [pc, #32]	; (8000398 <PRINT_TAB+0x64>)
 8000378:	220d      	movs	r2, #13
 800037a:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USART3 -> ISR & USART_ISR_TXE)){  }
 800037c:	bf00      	nop
 800037e:	4b06      	ldr	r3, [pc, #24]	; (8000398 <PRINT_TAB+0x64>)
 8000380:	69db      	ldr	r3, [r3, #28]
 8000382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000386:	2b00      	cmp	r3, #0
 8000388:	d0f9      	beq.n	800037e <PRINT_TAB+0x4a>
}
 800038a:	bf00      	nop
 800038c:	bf00      	nop
 800038e:	3714      	adds	r7, #20
 8000390:	46bd      	mov	sp, r7
 8000392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000396:	4770      	bx	lr
 8000398:	40004800 	.word	0x40004800

0800039c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800039c:	480d      	ldr	r0, [pc, #52]	; (80003d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800039e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003a0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003a4:	480c      	ldr	r0, [pc, #48]	; (80003d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80003a6:	490d      	ldr	r1, [pc, #52]	; (80003dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80003a8:	4a0d      	ldr	r2, [pc, #52]	; (80003e0 <LoopForever+0xe>)
  movs r3, #0
 80003aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003ac:	e002      	b.n	80003b4 <LoopCopyDataInit>

080003ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003b2:	3304      	adds	r3, #4

080003b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003b8:	d3f9      	bcc.n	80003ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ba:	4a0a      	ldr	r2, [pc, #40]	; (80003e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003bc:	4c0a      	ldr	r4, [pc, #40]	; (80003e8 <LoopForever+0x16>)
  movs r3, #0
 80003be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003c0:	e001      	b.n	80003c6 <LoopFillZerobss>

080003c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003c4:	3204      	adds	r2, #4

080003c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003c8:	d3fb      	bcc.n	80003c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003ca:	f000 f811 	bl	80003f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ce:	f7ff ff1b 	bl	8000208 <main>

080003d2 <LoopForever>:

LoopForever:
  b LoopForever
 80003d2:	e7fe      	b.n	80003d2 <LoopForever>
  ldr   r0, =_estack
 80003d4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80003d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003dc:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 80003e0:	08000458 	.word	0x08000458
  ldr r2, =_sbss
 80003e4:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 80003e8:	20000024 	.word	0x20000024

080003ec <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003ec:	e7fe      	b.n	80003ec <ADC_IRQHandler>
	...

080003f0 <__libc_init_array>:
 80003f0:	b570      	push	{r4, r5, r6, lr}
 80003f2:	4d0d      	ldr	r5, [pc, #52]	; (8000428 <__libc_init_array+0x38>)
 80003f4:	4c0d      	ldr	r4, [pc, #52]	; (800042c <__libc_init_array+0x3c>)
 80003f6:	1b64      	subs	r4, r4, r5
 80003f8:	10a4      	asrs	r4, r4, #2
 80003fa:	2600      	movs	r6, #0
 80003fc:	42a6      	cmp	r6, r4
 80003fe:	d109      	bne.n	8000414 <__libc_init_array+0x24>
 8000400:	4d0b      	ldr	r5, [pc, #44]	; (8000430 <__libc_init_array+0x40>)
 8000402:	4c0c      	ldr	r4, [pc, #48]	; (8000434 <__libc_init_array+0x44>)
 8000404:	f000 f818 	bl	8000438 <_init>
 8000408:	1b64      	subs	r4, r4, r5
 800040a:	10a4      	asrs	r4, r4, #2
 800040c:	2600      	movs	r6, #0
 800040e:	42a6      	cmp	r6, r4
 8000410:	d105      	bne.n	800041e <__libc_init_array+0x2e>
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f855 3b04 	ldr.w	r3, [r5], #4
 8000418:	4798      	blx	r3
 800041a:	3601      	adds	r6, #1
 800041c:	e7ee      	b.n	80003fc <__libc_init_array+0xc>
 800041e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000422:	4798      	blx	r3
 8000424:	3601      	adds	r6, #1
 8000426:	e7f2      	b.n	800040e <__libc_init_array+0x1e>
 8000428:	08000450 	.word	0x08000450
 800042c:	08000450 	.word	0x08000450
 8000430:	08000450 	.word	0x08000450
 8000434:	08000454 	.word	0x08000454

08000438 <_init>:
 8000438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800043a:	bf00      	nop
 800043c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800043e:	bc08      	pop	{r3}
 8000440:	469e      	mov	lr, r3
 8000442:	4770      	bx	lr

08000444 <_fini>:
 8000444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000446:	bf00      	nop
 8000448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800044a:	bc08      	pop	{r3}
 800044c:	469e      	mov	lr, r3
 800044e:	4770      	bx	lr
